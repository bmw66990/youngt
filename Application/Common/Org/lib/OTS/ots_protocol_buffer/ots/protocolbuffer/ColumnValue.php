<?php
namespace ots\protocolbuffer;

// @@protoc_insertion_point(namespace:.ots.protocolbuffer.ColumnValue)

/**
 * Generated by the protocol buffer compiler.  DO NOT EDIT!
 * source: ots_protocol_buffer.proto
 *
 * -*- magic methods -*-
 *
 * @method \ots\protocolbuffer\ColumnType getType()
 * @method void setType(\ots\protocolbuffer\ColumnType $value)
 * @method string getVInt()
 * @method void setVInt(\string $value)
 * @method string getVString()
 * @method void setVString(\string $value)
 * @method bool getVBool()
 * @method void setVBool(bool $value)
 * @method string getVDouble()
 * @method void setVDouble(\string $value)
 * @method string getVBinary()
 * @method void setVBinary(\string $value)
 */
class ColumnValue extends \ProtocolBuffers\Message
{
  // @@protoc_insertion_point(traits:.ots.protocolbuffer.ColumnValue)
  
  /**
   * @var \ots\protocolbuffer\ColumnType $type
   * @tag 1
   * @label required
   * @type \ProtocolBuffers::TYPE_ENUM
   * @see \ots\protocolbuffer\ColumnType
   **/
  protected $type;
  
  /**
   * @var string $v_int
   * @tag 2
   * @label optional
   * @type \ProtocolBuffers::TYPE_INT64
   **/
  protected $v_int;
  
  /**
   * @var string $v_string
   * @tag 3
   * @label optional
   * @type \ProtocolBuffers::TYPE_STRING
   **/
  protected $v_string;
  
  /**
   * @var bool $v_bool
   * @tag 4
   * @label optional
   * @type \ProtocolBuffers::TYPE_BOOL
   **/
  protected $v_bool;
  
  /**
   * @var string $v_double
   * @tag 5
   * @label optional
   * @type \ProtocolBuffers::TYPE_DOUBLE
   **/
  protected $v_double;
  
  /**
   * @var string $v_binary
   * @tag 6
   * @label optional
   * @type \ProtocolBuffers::TYPE_BYTES
   **/
  protected $v_binary;
  
  
  // @@protoc_insertion_point(properties_scope:.ots.protocolbuffer.ColumnValue)

  // @@protoc_insertion_point(class_scope:.ots.protocolbuffer.ColumnValue)

  /**
   * get descriptor for protocol buffers
   * 
   * @return \ProtocolBuffersDescriptor
   */
  public static function getDescriptor()
  {
    static $descriptor;
    
    if (!isset($descriptor)) {
      $desc = new \ProtocolBuffers\DescriptorBuilder();
      $desc->addField(1, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_ENUM,
        "name"     => "type",
        "required" => true,
        "optional" => false,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(2, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_INT64,
        "name"     => "v_int",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(3, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_STRING,
        "name"     => "v_string",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => "",
      )));
      $desc->addField(4, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_BOOL,
        "name"     => "v_bool",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => false,
      )));
      $desc->addField(5, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_DOUBLE,
        "name"     => "v_double",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      $desc->addField(6, new \ProtocolBuffers\FieldDescriptor(array(
        "type"     => \ProtocolBuffers::TYPE_BYTES,
        "name"     => "v_binary",
        "required" => false,
        "optional" => true,
        "repeated" => false,
        "packable" => false,
        "default"  => null,
      )));
      // @@protoc_insertion_point(builder_scope:.ots.protocolbuffer.ColumnValue)

      $descriptor = $desc->build();
    }
    return $descriptor;
  }

}
