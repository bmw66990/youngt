<?php
namespace ots\protocolbuffer;

// @@protoc_insertion_point(namespace:.ots.protocolbuffer.Direction)

/**
 * Generated by the protocol buffer compiler.  DO NOT EDIT!
 * source: ots_protocol_buffer.proto
 *
 */
class Direction extends \ProtocolBuffers\Enum
{
  // @@protoc_insertion_point(traits:.ots.protocolbuffer.Direction)
  
  const FORWARD = 0;
  const BACKWARD = 1;
  
  // @@protoc_insertion_point(const_scope:.ots.protocolbuffer.Direction)
  
  // @@protoc_insertion_point(class_scope:.ots.protocolbuffer.Direction)
  
  /**
   * @return \ProtocolBuffers\EnumDescriptor
   */
  public static function getEnumDescriptor()
  {
    static $descriptor;
    if (!$descriptor) {
      $builder = new \ProtocolBuffers\EnumDescriptorBuilder();
      $builder->addValue(new \ProtocolBuffers\EnumValueDescriptor(array(
        "value" => self::FORWARD,
        "name"  => 'FORWARD',
      )));
      $builder->addValue(new \ProtocolBuffers\EnumValueDescriptor(array(
        "value" => self::BACKWARD,
        "name"  => 'BACKWARD',
      )));
      // @@protoc_insertion_point(builder_scope:.ots.protocolbuffer.Direction)
      $descriptor = $builder->build();
    }
    return $descriptor;
  }
}
