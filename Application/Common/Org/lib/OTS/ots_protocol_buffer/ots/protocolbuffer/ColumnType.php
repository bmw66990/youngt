<?php
namespace ots\protocolbuffer;

// @@protoc_insertion_point(namespace:.ots.protocolbuffer.ColumnType)

/**
 * Generated by the protocol buffer compiler.  DO NOT EDIT!
 * source: ots_protocol_buffer.proto
 *
 */
class ColumnType extends \ProtocolBuffers\Enum
{
  // @@protoc_insertion_point(traits:.ots.protocolbuffer.ColumnType)
  
  const INF_MIN = 0;
  const INF_MAX = 1;
  const INTEGER = 2;
  const STRING = 3;
  const BOOLEAN = 4;
  const DOUBLE = 5;
  const BINARY = 6;
  
  // @@protoc_insertion_point(const_scope:.ots.protocolbuffer.ColumnType)
  
  // @@protoc_insertion_point(class_scope:.ots.protocolbuffer.ColumnType)
  
  /**
   * @return \ProtocolBuffers\EnumDescriptor
   */
  public static function getEnumDescriptor()
  {
    static $descriptor;
    if (!$descriptor) {
      $builder = new \ProtocolBuffers\EnumDescriptorBuilder();
      $builder->addValue(new \ProtocolBuffers\EnumValueDescriptor(array(
        "value" => self::INF_MIN,
        "name"  => 'INF_MIN',
      )));
      $builder->addValue(new \ProtocolBuffers\EnumValueDescriptor(array(
        "value" => self::INF_MAX,
        "name"  => 'INF_MAX',
      )));
      $builder->addValue(new \ProtocolBuffers\EnumValueDescriptor(array(
        "value" => self::INTEGER,
        "name"  => 'INTEGER',
      )));
      $builder->addValue(new \ProtocolBuffers\EnumValueDescriptor(array(
        "value" => self::STRING,
        "name"  => 'STRING',
      )));
      $builder->addValue(new \ProtocolBuffers\EnumValueDescriptor(array(
        "value" => self::BOOLEAN,
        "name"  => 'BOOLEAN',
      )));
      $builder->addValue(new \ProtocolBuffers\EnumValueDescriptor(array(
        "value" => self::DOUBLE,
        "name"  => 'DOUBLE',
      )));
      $builder->addValue(new \ProtocolBuffers\EnumValueDescriptor(array(
        "value" => self::BINARY,
        "name"  => 'BINARY',
      )));
      // @@protoc_insertion_point(builder_scope:.ots.protocolbuffer.ColumnType)
      $descriptor = $builder->build();
    }
    return $descriptor;
  }
}
